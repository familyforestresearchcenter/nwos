# Generate map
ggplot() +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=region, fill=variable),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
?geom_map
# Generate map
ggplot() +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=region, fill="red"),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
str(us)
us$variable <- as.factor(x$variable[match(us$fips, x$fips)])
# Generate map
ggplot() +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=region, fill=variable),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
us$value <- as.factor(x$variable[match(us$fips, x$fips)])
ggplot(us, aes(map_id = region)) +
geom_map(aes(fill = value), map = us)
# Generate map
ggplot(us, aes(map_id = region)) +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=region, fill=variable),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
rm(list=ls())
# Setup data
us <- map_data("county")
data(county.fips)
county.names <- as_tibble(data.frame(matrix(unlist(strsplit(county.fips$polyname, ",")), nrow=NROW(county.fips), byrow=T)))
names(county.names) <- c("state", "county")
county.fips <- bind_cols(as_tibble(county.fips), county.names)
us$fips <- county.fips$fips[match(paste0(us$region, us$subregion),
paste0(county.fips$state, county.fips$county))]
# Add data to be mapped
x <- tibble(fips = county.fips$fips,
variable = sample(c("red", "blue", "yellow"),
length(county.fips$fips), replace = T))
us$value <- as.factor(x$variable[match(us$fips, x$fips)])
# Generate map
ggplot() +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=region, fill=variable),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot() +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=region, fill=value),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
ggplot() +
geom_map(data=us,
map=us, aes(x=long, y=lat, map_id=region, fill=value),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot() +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=subregion, fill=value),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot() +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=region, fill=value),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
us
# Generate map
ggplot() +
geom_map(data=us %>% filter(region == "georgia"),
map=us, aes(x=long, y=lat, map_id=subregion, fill=value),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
ga <- us %>% filter(region == "georgia")
# Generate map
ggplot() +
geom_map(data=ga,
map=ga, aes(x=long, y=lat, map_id=region, fill=value),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(data=ga,
map=ga, aes(x=long, y=lat, map_id=region, fill=value),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(data=ga,
map=ga, aes(x=long, y=lat, map_id=region),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
ga
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(data=ga,
map=ga,
aes(x=long, y=lat, map_id=subregion),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
?geom_map
ga$value
county.names <- as_tibble(data.frame(matrix(unlist(strsplit(county.fips$polyname, ",")), nrow=NROW(county.fips), byrow=T)))
names(county.names) <- c("state", "county")
county.fips <- bind_cols(as_tibble(county.fips), county.names)
us$fips <- county.fips$fips[match(paste0(us$region, us$subregion),
paste0(county.fips$state, county.fips$county))]
# Add data to be mapped
x <- tibble(fips = county.fips$fips,
variable = sample(1:3,
length(county.fips$fips), replace = T))
us$value <- as.factor(x$variable[match(us$fips, x$fips)])
ga <- us %>% filter(region == "georgia")
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(data=ga,
map=ga,
aes(x=long, y=lat, map_id=subregion),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(data=ga,
map=ga,
aes(x=long, y=lat, map_id=region),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(#data=ga,
map=ga,
aes(x=long, y=lat, map_id=region),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(#data=ga,
map=ga,
aes(x=long, y=lat, map_id=subregion),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
ga$subregion
ga$region
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(#data=ga,
map=ga,
aes(x=long, y=lat, map_id=region),
color="black") +
coord_map("albers", lat0 = 39, lat1 = 45) +
labs(x=NULL, y=NULL) +
theme(panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank())
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(#data=ga,
map=ga,
aes(x=long, y=lat, map_id=region),
color="black")
# Generate map
ggplot(ga, aes(fill=value)) +
geom_map(#data=ga,
map=ga,
aes(x=long, y=lat, map_id=region, fill=value),
color="black")
# Generate map
ggplot(ga, aes(fill="black")) +
geom_map(#data=ga,
map=ga,
aes(x=long, y=lat, map_id=region, fill=value),
color="black")
# Generate map
ggplot(ga, aes(fill="black")) +
geom_map(#data=ga,
map=ga,
aes(x=long, y=lat, map_id=region, fill="black"),
color="black")
# Generate map
ggplot() +
geom_map(#data=ga,
map=ga,
aes(x=long, y=lat, map_id=region, fill="black"),
color="black")
# Generate map
ggplot() +
geom_map(data=ga,
map=ga,
aes(x=long, y=lat, map_id=region, fill="black"),
color="black")
# Generate map
ggplot() +
geom_map(data=ga,
map=ga,
aes(x=long, y=lat, map_id=region, fill=value),
color="black")
ggplot(ga, aes(map_id = region)) +
geom_map(aes(x=long, y=lat, fill=value),
map=ga)
devtools::install_git("git://github.com/bbutler01/nwos.git")
install.packages("devtools")
install.packages("tidyverse")
devtools::install_git("git://github.com/bbutler01/nwos.git")
# devtools::install_git("git://github.com/bbutler01/nwos.git")
library(nwos)
?library
.libPaths()
library(tidyverse)
wi <- tbl_df(read.csv("../data/wi.csv"))
wi <- wi %>% mutate(ROW_NAME = row.names(wi),
AC_WOOD = ACRES_FOREST)
WI_REPLICATES <- nwos_replicates(index = row.names(wi), point.count = wi$POINT_COUNT, R = 100)
wi <- wi %>% mutate(FFO = if_else(LAND_USE == 1 & OWN_CD == 45 & AC_WOOD >= 1, 1, 0)) # Add stratum variable, FFO
WI_FFO_AREA <- nwos_stratum_area(stratum = wi$FFO, point.count = wi$POINT_COUNT, state.area = 33898733)
WI_FFO_AREA_REP <- sapply(WI_REPLICATES, nwos_stratum_area_apply, index = wi$ROW_NAME, stratum = wi$FFO, state.area = 33898733)
wi <- wi %>% mutate(RESPONSE = if_else(RESPONSE_PROPENSITY >= 0.5, 1, 0)) %>%
mutate(RESPONSE = if_else(is.na(RESPONSE_PROPENSITY), 0, RESPONSE))
WI_FFO_RR <- nwos_response_rate(stratum = wi$FFO, point.count = wi$POINT_COUNT, response = wi$RESPONSE)
WI_FFO_RR_REP <- sapply(WI_REPLICATES, nwos_response_rate_apply, index = wi$ROW_NAME, stratum = wi$FFO, response = wi$RESPONSE)
wi$WEIGHT <- nwos_weights(stratum = wi$FFO, point.count = wi$POINT_COUNT,
response = wi$RESPONSE, area = wi$AC_WOOD,
stratum.area = WI_FFO_AREA, response.rate = WI_FFO_RR)
WI_FFO_WEIGHTS_REP <- lapply(1:length(WI_REPLICATES),
nwos_weights_apply,
index.rep = WI_REPLICATES,
index = wi$ROW_NAME,
stratum = wi$FFO,
response = wi$RESPONSE,
area = wi$AC_WOOD,
stratum.area = WI_FFO_AREA_REP,
response.rate = WI_FFO_RR_REP)
WI_FFO_OWN_TOTAL <- nwos_total(weight = wi$WEIGHT)
# wi <- wi %>% mutate(OWNER = 1)
WI_FFO_OWN_TOTAL_REP <- sapply(1:length(WI_REPLICATES),
nwos_total_apply,
index.rep = WI_REPLICATES,
index = wi$ROW_NAME,
weight = WI_FFO_WEIGHTS_REP)
WI_FFO_OWN_TOTAL
sqrt(var(WI_FFO_OWN_TOTAL_REP))
?data
data("wi.csv")
data("wi.csv", package = "nwos")
?if_else
parc <- function(A = 640, s = 2, g = 10)
{
A / s
}
parc
parc()
320/2
160/2
80/2
40/2
20/2
10/2
5/2
2.5/2
640/1.25
40/1.25
40 / 3
13.3333 / 3
?install.packages
300 * .3
2.3 e 9 / 6 e 3
2.3e9 / 6 e 3
2.3e9 / 6e3
library(devtools)
document()
document()
# Back transform nwos.wide to nwos.long
nwos.wide <- readRDS("/Dropbox (FFRC)/NWOS/ESTIMATION/ESTIMATES/DATA/FFO/TENPLUS/NWOS_2018_FFO_TENPLUS_WIDE.RDS")
# Back transform nwos.wide to nwos.long
nwos.wide <- readRDS("~/Dropbox (FFRC)/NWOS/ESTIMATION/ESTIMATES/DATA/FFO/TENPLUS/NWOS_2018_FFO_TENPLUS_WIDE.RDS")
nwos.long <- left_join(nwos.wide %>%
select(GEO_ABB:LEVEL, AC, OWN, AC_PROP, OWN_PROP, N, MEAN, MEDIAN, OWNERS) %>%
pivot_longer(cols = c(AC, OWN, AC_PROP, OWN_PROP, N, MEAN, MEDIAN, OWNERS),
names_to = "STATISTIC", values_to = "VALUE") %>%
filter(!is.na(VALUE)) %>%
mutate(UNITS = recode(STATISTIC,
"AC" = "ACRES",
"OWN" = "OWNERSHIPS",
"AC_PROP" = "ACRES",
"OWN_PROP" = "OWNERSHIPS",
"MEAN" = "OWNERSHIPS",
"MEDIAN" = "OWNERSHIPS",
"OWNERS"  = "OWNERS"),
STATISTIC = recode(STATISTIC,
"AC" = "TOTAL",
"OWN" = "TOTAL",
"AC_PROP" = "PROPORTION",
"OWN_PROP" = "PROPORTION",
"MEAN" = "MEAN",
"MEDIAN" = "MEDIAN",
"OWNERS"  = "TOTAL")),
nwos.wide %>%
select(GEO_ABB:LEVEL, AC_VAR, OWN_VAR, AC_PROP_VAR, OWN_PROP_VAR, MEAN_VAR, VARIANCE, OWNERS_VAR) %>%
pivot_longer(cols = c(AC_VAR, OWN_VAR, AC_PROP_VAR, OWN_PROP_VAR, MEAN_VAR, VARIANCE, OWNERS_VAR),
names_to = "STATISTIC", values_to = "VARIANCE") %>%
filter(!is.na(VARIANCE)) %>%
mutate(UNITS = recode(STATISTIC,
"AC_VAR" = "ACRES",
"OWN_VAR" = "OWNERSHIPS",
"AC_PROP_VAR" = "ACRES",
"OWN_PROP_VAR" = "OWNERSHIPS",
"MEAN_VAR" = "OWNERSHIPS",
"VARIANCE" = "OWNERSHIPS",
"OWNERS_VAR"  = "OWNERS"),
STATISTIC = recode(STATISTIC,
"AC_VAR" = "TOTAL",
"OWN_VAR" = "TOTAL",
"AC_PROP_VAR" = "PROPORTION",
"OWN_PROP_VAR" = "PROPORTION",
"MEAN_VAR" = "MEAN",
"VARIANCE" = "MEDIAN",
"OWNERS_VAR"  = "TOTAL"),
LEVEL = as.character(LEVEL)),
by = c("GEO_ABB", "STRATUM", "DOMAIN", "VARIABLE", "LEVEL", "STATISTIC", "UNITS")) %>%
select(GEO_ABB:LEVEL, STATISTIC, UNITS, VALUE, VARIANCE)# %>%
# Back transform nwos.wide to nwos.long
library(tidyverse)
nwos.long <- left_join(nwos.wide %>%
select(GEO_ABB:LEVEL, AC, OWN, AC_PROP, OWN_PROP, N, MEAN, MEDIAN, OWNERS) %>%
pivot_longer(cols = c(AC, OWN, AC_PROP, OWN_PROP, N, MEAN, MEDIAN, OWNERS),
names_to = "STATISTIC", values_to = "VALUE") %>%
filter(!is.na(VALUE)) %>%
mutate(UNITS = recode(STATISTIC,
"AC" = "ACRES",
"OWN" = "OWNERSHIPS",
"AC_PROP" = "ACRES",
"OWN_PROP" = "OWNERSHIPS",
"MEAN" = "OWNERSHIPS",
"MEDIAN" = "OWNERSHIPS",
"OWNERS"  = "OWNERS"),
STATISTIC = recode(STATISTIC,
"AC" = "TOTAL",
"OWN" = "TOTAL",
"AC_PROP" = "PROPORTION",
"OWN_PROP" = "PROPORTION",
"MEAN" = "MEAN",
"MEDIAN" = "MEDIAN",
"OWNERS"  = "TOTAL")),
nwos.wide %>%
select(GEO_ABB:LEVEL, AC_VAR, OWN_VAR, AC_PROP_VAR, OWN_PROP_VAR, MEAN_VAR, VARIANCE, OWNERS_VAR) %>%
pivot_longer(cols = c(AC_VAR, OWN_VAR, AC_PROP_VAR, OWN_PROP_VAR, MEAN_VAR, VARIANCE, OWNERS_VAR),
names_to = "STATISTIC", values_to = "VARIANCE") %>%
filter(!is.na(VARIANCE)) %>%
mutate(UNITS = recode(STATISTIC,
"AC_VAR" = "ACRES",
"OWN_VAR" = "OWNERSHIPS",
"AC_PROP_VAR" = "ACRES",
"OWN_PROP_VAR" = "OWNERSHIPS",
"MEAN_VAR" = "OWNERSHIPS",
"VARIANCE" = "OWNERSHIPS",
"OWNERS_VAR"  = "OWNERS"),
STATISTIC = recode(STATISTIC,
"AC_VAR" = "TOTAL",
"OWN_VAR" = "TOTAL",
"AC_PROP_VAR" = "PROPORTION",
"OWN_PROP_VAR" = "PROPORTION",
"MEAN_VAR" = "MEAN",
"VARIANCE" = "MEDIAN",
"OWNERS_VAR"  = "TOTAL"),
LEVEL = as.character(LEVEL)),
by = c("GEO_ABB", "STRATUM", "DOMAIN", "VARIABLE", "LEVEL", "STATISTIC", "UNITS")) %>%
select(GEO_ABB:LEVEL, STATISTIC, UNITS, VALUE, VARIANCE)# %>%
nwos.long <- left_join(nwos.wide %>%
select(GEO_ABB:LEVEL, AC, OWN, AC_PROP, OWN_PROP, N, MEAN, MEDIAN, OWNERS) %>%
pivot_longer(cols = c(AC, OWN, AC_PROP, OWN_PROP, N, MEAN, MEDIAN, OWNERS),
names_to = "STATISTIC", values_to = "VALUE") %>%
filter(!is.na(VALUE)) %>%
mutate(UNITS = recode(STATISTIC,
"AC" = "ACRES",
"OWN" = "OWNERSHIPS",
"AC_PROP" = "ACRES",
"OWN_PROP" = "OWNERSHIPS",
"MEAN" = "OWNERSHIPS",
"MEDIAN" = "OWNERSHIPS",
"OWNERS"  = "OWNERS"),
STATISTIC = recode(STATISTIC,
"AC" = "TOTAL",
"OWN" = "TOTAL",
"AC_PROP" = "PROPORTION",
"OWN_PROP" = "PROPORTION",
"MEAN" = "MEAN",
"MEDIAN" = "MEDIAN",
"OWNERS"  = "TOTAL")),
nwos.wide %>%
select(GEO_ABB:LEVEL, AC_VAR, OWN_VAR, AC_PROP_VAR, OWN_PROP_VAR, MEAN_VAR, VARIANCE, OWNERS_VAR) %>%
pivot_longer(cols = c(AC_VAR, OWN_VAR, AC_PROP_VAR, OWN_PROP_VAR, MEAN_VAR, VARIANCE, OWNERS_VAR),
names_to = "STATISTIC", values_to = "VARIANCE") %>%
filter(!is.na(VARIANCE)) %>%
mutate(UNITS = recode(STATISTIC,
"AC_VAR" = "ACRES",
"OWN_VAR" = "OWNERSHIPS",
"AC_PROP_VAR" = "ACRES",
"OWN_PROP_VAR" = "OWNERSHIPS",
"MEAN_VAR" = "OWNERSHIPS",
"VARIANCE" = "OWNERSHIPS",
"OWNERS_VAR"  = "OWNERS"),
STATISTIC = recode(STATISTIC,
"AC_VAR" = "TOTAL",
"OWN_VAR" = "TOTAL",
"AC_PROP_VAR" = "PROPORTION",
"OWN_PROP_VAR" = "PROPORTION",
"MEAN_VAR" = "MEAN",
"VARIANCE" = "MEDIAN",
"OWNERS_VAR"  = "TOTAL"),
LEVEL = as.character(LEVEL)),
by = c("GEO_ABB", "STRATUM", "DOMAIN", "VARIABLE", "LEVEL", "STATISTIC", "UNITS")) %>%
select(GEO_ABB:LEVEL, STATISTIC, UNITS, VALUE, VARIANCE) %>%
distinct()
View(nwos.long)
saveRDS(nwos.long, "~/Dropbox (FFRC)/NWOS/ESTIMATION/ESTIMATES/DATA/FFO/TENPLUS/NWOS_2018_FFO_TENPLUS.RDS")
